//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SC.UI.Web.MVC.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITicket")]
    public interface ITicket {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetTickets", ReplyAction="http://tempuri.org/ITicket/GetTicketsResponse")]
        SC.BL.Domain.Ticket[] GetTickets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetTickets", ReplyAction="http://tempuri.org/ITicket/GetTicketsResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket[]> GetTicketsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetHwTickets", ReplyAction="http://tempuri.org/ITicket/GetHwTicketsResponse")]
        SC.BL.Domain.HardwareTicket[] GetHwTickets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetHwTickets", ReplyAction="http://tempuri.org/ITicket/GetHwTicketsResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.HardwareTicket[]> GetHwTicketsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetTicket", ReplyAction="http://tempuri.org/ITicket/GetTicketResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SC.BL.Domain.HardwareTicket))]
        SC.BL.Domain.Ticket GetTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetTicket", ReplyAction="http://tempuri.org/ITicket/GetTicketResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket> GetTicketAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/CreateTicket", ReplyAction="http://tempuri.org/ITicket/CreateTicketResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SC.BL.Domain.HardwareTicket))]
        SC.BL.Domain.Ticket CreateTicket(int accountId, string question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/CreateTicket", ReplyAction="http://tempuri.org/ITicket/CreateTicketResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket> CreateTicketAsync(int accountId, string question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/CreateHwTicket", ReplyAction="http://tempuri.org/ITicket/CreateHwTicketResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SC.BL.Domain.HardwareTicket))]
        SC.BL.Domain.Ticket CreateHwTicket(int accountId, string device, string problem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/CreateHwTicket", ReplyAction="http://tempuri.org/ITicket/CreateHwTicketResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket> CreateHwTicketAsync(int accountId, string device, string problem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/CloseTicket", ReplyAction="http://tempuri.org/ITicket/CloseTicketResponse")]
        void CloseTicket(int ticketnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/CloseTicket", ReplyAction="http://tempuri.org/ITicket/CloseTicketResponse")]
        System.Threading.Tasks.Task CloseTicketAsync(int ticketnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/AddTicketResponse", ReplyAction="http://tempuri.org/ITicket/AddTicketResponseResponse")]
        SC.BL.Domain.TicketResponse AddTicketResponse(int ticketNumber, string response, bool isClientResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/AddTicketResponse", ReplyAction="http://tempuri.org/ITicket/AddTicketResponseResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse> AddTicketResponseAsync(int ticketNumber, string response, bool isClientResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetTicketResponses", ReplyAction="http://tempuri.org/ITicket/GetTicketResponsesResponse")]
        SC.BL.Domain.TicketResponse[] GetTicketResponses(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/GetTicketResponses", ReplyAction="http://tempuri.org/ITicket/GetTicketResponsesResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse[]> GetTicketResponsesAsync(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/SayHello", ReplyAction="http://tempuri.org/ITicket/SayHelloResponse")]
        string SayHello();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicket/SayHello", ReplyAction="http://tempuri.org/ITicket/SayHelloResponse")]
        System.Threading.Tasks.Task<string> SayHelloAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketChannel : SC.UI.Web.MVC.ServiceReference1.ITicket, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketClient : System.ServiceModel.ClientBase<SC.UI.Web.MVC.ServiceReference1.ITicket>, SC.UI.Web.MVC.ServiceReference1.ITicket {
        
        public TicketClient() {
        }
        
        public TicketClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SC.BL.Domain.Ticket[] GetTickets() {
            return base.Channel.GetTickets();
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket[]> GetTicketsAsync() {
            return base.Channel.GetTicketsAsync();
        }
        
        public SC.BL.Domain.HardwareTicket[] GetHwTickets() {
            return base.Channel.GetHwTickets();
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.HardwareTicket[]> GetHwTicketsAsync() {
            return base.Channel.GetHwTicketsAsync();
        }
        
        public SC.BL.Domain.Ticket GetTicket(int id) {
            return base.Channel.GetTicket(id);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket> GetTicketAsync(int id) {
            return base.Channel.GetTicketAsync(id);
        }
        
        public SC.BL.Domain.Ticket CreateTicket(int accountId, string question) {
            return base.Channel.CreateTicket(accountId, question);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket> CreateTicketAsync(int accountId, string question) {
            return base.Channel.CreateTicketAsync(accountId, question);
        }
        
        public SC.BL.Domain.Ticket CreateHwTicket(int accountId, string device, string problem) {
            return base.Channel.CreateHwTicket(accountId, device, problem);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket> CreateHwTicketAsync(int accountId, string device, string problem) {
            return base.Channel.CreateHwTicketAsync(accountId, device, problem);
        }
        
        public void CloseTicket(int ticketnumber) {
            base.Channel.CloseTicket(ticketnumber);
        }
        
        public System.Threading.Tasks.Task CloseTicketAsync(int ticketnumber) {
            return base.Channel.CloseTicketAsync(ticketnumber);
        }
        
        public SC.BL.Domain.TicketResponse AddTicketResponse(int ticketNumber, string response, bool isClientResponse) {
            return base.Channel.AddTicketResponse(ticketNumber, response, isClientResponse);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse> AddTicketResponseAsync(int ticketNumber, string response, bool isClientResponse) {
            return base.Channel.AddTicketResponseAsync(ticketNumber, response, isClientResponse);
        }
        
        public SC.BL.Domain.TicketResponse[] GetTicketResponses(int ticketNumber) {
            return base.Channel.GetTicketResponses(ticketNumber);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse[]> GetTicketResponsesAsync(int ticketNumber) {
            return base.Channel.GetTicketResponsesAsync(ticketNumber);
        }
        
        public string SayHello() {
            return base.Channel.SayHello();
        }
        
        public System.Threading.Tasks.Task<string> SayHelloAsync() {
            return base.Channel.SayHelloAsync();
        }
    }
}
